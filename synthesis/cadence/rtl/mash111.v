// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\mash_111\mash111.v
// Created: 2024-03-25 18:24:25
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-08
// Target subsystem base rate: 5e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        5e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mash111
// Source Path: mash_111/mash111
// Hierarchy Level: 0
// Model version: 13.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mash111
          (clk,
           rst,
           clk_enable,
           In1,
           ce_out,
           Out1);


  input   clk;
  input   rst;
  input   clk_enable;
  input   signed [42:0] In1;  // sfix43_En42
  output  ce_out;
  output  signed [4:0] Out1;  // sfix5_En1


  wire enb;
  wire signed [45:0] Sum_out1;  // sfix46_En43
  wire signed [1:0] flash_out1;  // sfix2_En1
  wire signed [46:0] Sum5_sub_cast;  // sfix47_En43
  wire signed [46:0] Sum5_sub_cast_1;  // sfix47_En43
  wire signed [46:0] Sum5_sub_temp;  // sfix47_En43
  wire signed [44:0] Sum5_out1;  // sfix45_En43
  reg signed [44:0] Unit_Delay_out1;  // sfix45_En43
  wire signed [45:0] Sum_add_cast;  // sfix46_En43
  wire signed [45:0] Sum_add_cast_1;  // sfix46_En43
  reg signed [1:0] Delay_reg [0:1];  // sfix2 [2]
  wire signed [1:0] Delay_reg_next [0:1];  // sfix2_En1 [2]
  wire signed [1:0] Delay_out1;  // sfix2_En1
  wire signed [11:0] Sum1_out1;  // sfix12_En11
  wire flash1_out1;  // ufix1_En1
  wire signed [12:0] Sum2_sub_cast;  // sfix13_En11
  wire signed [12:0] Sum2_sub_cast_1;  // sfix13_En11
  wire signed [12:0] Sum2_sub_temp;  // sfix13_En11
  wire signed [11:0] Sum2_out1;  // sfix12_En11
  reg signed [11:0] Unit_Delay1_out1;  // sfix12_En11
  wire signed [23:0] Gain1_out1;  // sfix24_En21
  wire signed [46:0] Sum1_add_cast;  // sfix47_En43
  wire signed [46:0] Sum1_add_cast_1;  // sfix47_En43
  wire signed [46:0] Sum1_add_temp;  // sfix47_En43
  reg  Delay1_out1;  // ufix1_En1
  wire signed [11:0] Sum4_out1;  // sfix12_En11
  wire flash2_out1;  // ufix1_En1
  wire signed [12:0] Sum6_sub_cast;  // sfix13_En11
  wire signed [12:0] Sum6_sub_cast_1;  // sfix13_En11
  wire signed [12:0] Sum6_sub_temp;  // sfix13_En11
  wire signed [11:0] Sum6_out1;  // sfix12_En11
  reg signed [11:0] Unit_Delay2_out1;  // sfix12_En11
  wire signed [2:0] Sum7_stage2_add_cast;  // sfix3_En1
  wire signed [2:0] Sum7_stage2_add_cast_1;  // sfix3_En1
  wire signed [2:0] Sum7_stage2_add_temp;  // sfix3_En1
  wire [1:0] Sum7_op_stage1;  // ufix2_En1
  reg  Delay2_out1;  // ufix1_En1
  wire signed [2:0] Sum7_stage3_sub_cast;  // sfix3_En1
  wire signed [2:0] Sum7_stage3_sub_cast_1;  // sfix3_En1
  wire signed [2:0] Sum7_out1;  // sfix3_En1
  wire signed [3:0] Sum3_stage2_add_cast;  // sfix4_En1
  wire signed [3:0] Sum3_stage2_add_cast_1;  // sfix4_En1
  wire signed [3:0] Sum3_op_stage1;  // sfix4_En1
  reg signed [2:0] Delay3_out1;  // sfix3_En1
  wire signed [4:0] Sum3_stage3_sub_cast;  // sfix5_En1
  wire signed [4:0] Sum3_stage3_sub_cast_1;  // sfix5_En1
  wire signed [4:0] Sum3_out1;  // sfix5_En1
  reg signed [31:0] Delay_t_0_0;  // int32
  reg signed [31:0] Delay_t_1;  // int32


  assign enb = clk_enable;

  assign Sum5_sub_cast = {Sum_out1[45], Sum_out1};
  assign Sum5_sub_cast_1 = {{3{flash_out1[1]}}, {flash_out1, 42'b000000000000000000000000000000000000000000}};
  assign Sum5_sub_temp = Sum5_sub_cast - Sum5_sub_cast_1;
  assign Sum5_out1 = Sum5_sub_temp[44:0];



  always @(posedge clk or negedge rst)
    begin : Unit_Delay_process
      if (rst == 1'b0) begin
        Unit_Delay_out1 <= 45'sh000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_out1 <= Sum5_out1;
        end
      end
    end



  assign Sum_add_cast = {{2{In1[42]}}, {In1, 1'b0}};
  assign Sum_add_cast_1 = {Unit_Delay_out1[44], Unit_Delay_out1};
  assign Sum_out1 = Sum_add_cast + Sum_add_cast_1;



  assign flash_out1 = Sum_out1[43:42];



  always @(posedge clk or negedge rst)
    begin : Delay_process
      if (rst == 1'b0) begin
        for(Delay_t_1 = 32'sd0; Delay_t_1 <= 32'sd1; Delay_t_1 = Delay_t_1 + 32'sd1) begin
          Delay_reg[Delay_t_1] <= 2'sb00;
        end
      end
      else begin
        if (enb) begin
          for(Delay_t_0_0 = 32'sd0; Delay_t_0_0 <= 32'sd1; Delay_t_0_0 = Delay_t_0_0 + 32'sd1) begin
            Delay_reg[Delay_t_0_0] <= Delay_reg_next[Delay_t_0_0];
          end
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = flash_out1;
  assign Delay_reg_next[1] = Delay_reg[0];



  assign Sum2_sub_cast = {Sum1_out1[11], Sum1_out1};
  assign Sum2_sub_cast_1 = {2'b0, {flash1_out1, 10'b0000000000}};
  assign Sum2_sub_temp = Sum2_sub_cast - Sum2_sub_cast_1;
  assign Sum2_out1 = Sum2_sub_temp[11:0];



  always @(posedge clk or negedge rst)
    begin : Unit_Delay1_process
      if (rst == 1'b0) begin
        Unit_Delay1_out1 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay1_out1 <= Sum2_out1;
        end
      end
    end



  assign Gain1_out1 = {{2{Unit_Delay1_out1[11]}}, {Unit_Delay1_out1, 10'b0000000000}};



  assign Sum1_add_cast = {{2{Sum5_out1[44]}}, Sum5_out1};
  assign Sum1_add_cast_1 = {Gain1_out1[23], {Gain1_out1, 22'b0000000000000000000000}};
  assign Sum1_add_temp = Sum1_add_cast + Sum1_add_cast_1;
  assign Sum1_out1 = Sum1_add_temp[43:32];



  assign flash1_out1 = Sum1_out1[10];



  always @(posedge clk or negedge rst)
    begin : Delay1_process
      if (rst == 1'b0) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= flash1_out1;
        end
      end
    end



  assign Sum6_sub_cast = {Sum4_out1[11], Sum4_out1};
  assign Sum6_sub_cast_1 = {2'b0, {flash2_out1, 10'b0000000000}};
  assign Sum6_sub_temp = Sum6_sub_cast - Sum6_sub_cast_1;
  assign Sum6_out1 = Sum6_sub_temp[11:0];



  always @(posedge clk or negedge rst)
    begin : Unit_Delay2_process
      if (rst == 1'b0) begin
        Unit_Delay2_out1 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay2_out1 <= Sum6_out1;
        end
      end
    end



  assign Sum4_out1 = Sum2_out1 + Unit_Delay2_out1;



  assign flash2_out1 = Sum4_out1[10];



  assign Sum7_stage2_add_cast = {2'b0, Delay1_out1};
  assign Sum7_stage2_add_cast_1 = {2'b0, flash2_out1};
  assign Sum7_stage2_add_temp = Sum7_stage2_add_cast + Sum7_stage2_add_cast_1;
  assign Sum7_op_stage1 = Sum7_stage2_add_temp[1:0];



  always @(posedge clk or negedge rst)
    begin : Delay2_process
      if (rst == 1'b0) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= flash2_out1;
        end
      end
    end



  assign Sum7_stage3_sub_cast = {1'b0, Sum7_op_stage1};
  assign Sum7_stage3_sub_cast_1 = {2'b0, Delay2_out1};
  assign Sum7_out1 = Sum7_stage3_sub_cast - Sum7_stage3_sub_cast_1;



  assign Sum3_stage2_add_cast = {{2{Delay_out1[1]}}, Delay_out1};
  assign Sum3_stage2_add_cast_1 = {Sum7_out1[2], Sum7_out1};
  assign Sum3_op_stage1 = Sum3_stage2_add_cast + Sum3_stage2_add_cast_1;



  always @(posedge clk or negedge rst)
    begin : Delay3_process
      if (rst == 1'b0) begin
        Delay3_out1 <= 3'sb000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Sum7_out1;
        end
      end
    end



  assign Sum3_stage3_sub_cast = {Sum3_op_stage1[3], Sum3_op_stage1};
  assign Sum3_stage3_sub_cast_1 = {{2{Delay3_out1[2]}}, Delay3_out1};
  assign Sum3_out1 = Sum3_stage3_sub_cast - Sum3_stage3_sub_cast_1;



  assign Out1 = Sum3_out1;

  assign ce_out = clk_enable;

endmodule  // mash111

